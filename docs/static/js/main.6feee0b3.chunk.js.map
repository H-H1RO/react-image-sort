{"version":3,"sources":["components/BeautifulDnd.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initial","Array","from","length","v","k","map","id","imageUrl","faker","image","animals","Image","index","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","src","alt","width","height","BeautifulDnd","useState","images","setImages","ScrollContainer","onDragEnd","result","destination","source","newImages","arrayMove","droppableId","direction","ImageList","droppableProps","key","placeholder","styled","div","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"seAQA,IAAMA,EAAUC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGC,GAAJ,OAAUA,KAAGC,KAAI,SAAAD,GAM1D,MALqB,CACnBE,GAAIF,EACJG,SAAUC,IAAMC,MAAMC,cAMpBC,EAAQ,SAAC,GAAsD,IAApDF,EAAmD,EAAnDA,MAAOG,EAA4C,EAA5CA,MACtB,OACE,kBAAC,IAAD,CAAWC,YAAaC,OAAOL,EAAMH,IAAKM,MAAOA,IAC9C,SAAAG,GAAQ,OACP,uCACEC,IAAKD,EAASE,UACVF,EAASG,eACTH,EAASI,iBAEb,yBAAKC,IAAKX,EAAMF,SAAUc,IAAKZ,EAAMF,SAAUe,MAAO,IAAKC,OAAQ,YAOhEC,EAAe,WAAO,IAAD,EACJC,mBAAkB1B,GADd,mBACzB2B,EADyB,KACjBC,EADiB,KAqBhC,OACE,6BACE,6BACGD,EAAOrB,KAAI,SAAAI,GAAK,OAAIA,EAAMH,OAE7B,kBAACsB,EAAD,KACE,kBAAC,IAAD,CAAiBC,UAxBL,SAACC,GACjB,GAAKA,EAAOC,aAIRD,EAAOC,YAAYnB,QAAUkB,EAAOE,OAAOpB,MAA/C,CAIA,IAAMqB,EAAYC,YAChBR,EACAI,EAAOE,OAAOpB,MACdkB,EAAOC,YAAYnB,OAGrBe,EAAUM,MAUJ,kBAAC,IAAD,CAAWE,YAAY,OAAOC,UAAU,eACrC,SAAArB,GAAQ,OACP,kBAACsB,EAAD,eAAWrB,IAAKD,EAASE,UAAcF,EAASuB,gBAC7CZ,EAAOrB,KAAI,SAACI,EAAcG,GAAf,OACV,kBAAC,EAAD,CAAOH,MAAOA,EAAOG,MAAOA,EAAO2B,IAAK9B,EAAMH,QAE/CS,EAASyB,oBAUpBZ,EAAkBa,IAAOC,IAAV,KAGfL,EAAYI,IAAOC,IAAV,KCpEAC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6feee0b3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable, DropResult } from \"react-beautiful-dnd\";\nimport faker from 'faker/locale/ja';\nimport { arrayMove } from \"react-sortable-hoc\";\nimport styled from 'styled-components'\n\ntype Image = { id: number, imageUrl: string }\n\nconst initial = Array.from({ length: 10 }, (v, k) => k).map(k => {\n  const image: Image = {\n    id: k,\n    imageUrl: faker.image.animals()\n  };\n\n  return image;\n});\n\nconst Image = ({ image, index }: { image: Image, index: number}) => {\n  return (\n    <Draggable draggableId={String(image.id)} index={index}>\n      {provided => (\n        <div\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <img src={image.imageUrl} alt={image.imageUrl} width={300} height={200}/>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport const BeautifulDnd = () => {\n  const [images, setImages] = useState<Image[]>(initial);\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const newImages = arrayMove(\n      images,\n      result.source.index,\n      result.destination.index\n    );\n\n    setImages(newImages);\n  }\n\n  return (\n    <div>\n      <div>\n        {images.map(image => image.id)}\n      </div>\n      <ScrollContainer>\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"list\" direction=\"horizontal\">\n            {provided => (\n              <ImageList ref={provided.innerRef} {...provided.droppableProps}>\n                {images.map((image: Image, index: number) => (\n                  <Image image={image} index={index} key={image.id} />\n                ))}\n                {provided.placeholder}\n              </ImageList>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </ScrollContainer>\n    </div>\n  );\n};\n\nconst ScrollContainer = styled.div`\n  overflow: scroll;\n`\nconst ImageList = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 16px;\n  width: fit-content;\n`\n","import React from 'react';\nimport './App.css';\nimport { BeautifulDnd } from './components/BeautifulDnd';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BeautifulDnd />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}